package arifmetika.javarush;

public class InkrementDekrement {

    public static void main(String[] args) {

        /*
        Инкремент (++) и декремент (--)
        Операция ++ увеличивает число на единицу,
        а операция -- уменьшает на эту же самую единицу.
         */

        int x = 999;
        x++;
        System.out.println(x);

        x--;
        System.out.println(x);

        /*
        Операции инкремента и декремента бывают двух видов: постфиксными, и префиксными.

        x++ — постфиксная запись
        ++x — префиксная запись
         */

        /*
        разница, если ставить плюсы-минусы перед числом или после?

Увидим на примере:

public class Main {

   public static void main(String[] args) {

       int x = 999;
       int y = x++;
       System.out.println(y);
   }
}

Вывод в консоль:


999

Что-то не так! Мы хотели увеличить x на 1 и присвоить новое значение переменной y.
То есть y должен быть равен 1000. Но у нас другой результат — 999.
Получается, x не был увеличен, и операция инкремента не сработала?

Еще как сработала. Чтобы в этом убедиться, попробуй вывести x на консоль в конце :)

public class Main {

   public static void main(String[] args) {

       int x = 999;
       int y = x++;
       System.out.println(y);
       System.out.println(x);
   }
}

Вывод в консоль:


999
1000

На самом деле, постфиксная операция потому так и называется:
она выполняется после основного выражения. То есть в нашем случае:

int y = x++;

сначала выполняется

y = x (и переменной y будет присвоено изначальное значение x), а только потом

x++

Как быть, если нас не устраивает такое поведение?
Нужно использовать префиксный способ записи:

public class Main {

   public static void main(String[] args) {

       int x = 999;
       int y = ++x;
       System.out.println(y);
   }
}

В этом случае сначала отработает

++x

и только после этого

y = x;
         */
    }
}
